# Prometheus Server parameters
prometheus:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/whitelist-source-range: ${ip_whitelist}
    path: /
    hosts:
      - ${prometheus_domain_name}
    tls:
    - hosts:
      - ${prometheus_domain_name}
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 30Gi
    resources:
      requests:
        cpu: 200m
        memory: 1024Mi
      limits:
        cpu: 400m
        memory: 1024Mi
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: eks.amazonaws.com/capacityType
              operator: In
              values:
                - ON_DEMAND

prometheusOperator:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/capacityType
            operator: In
            values:
              - ON_DEMAND

# Grafana settings
grafana:
  enabled: true
  image:
    tag: 7.2.0
  deploymentStrategy:
    type: Recreate
  adminPassword: "${grafana_password}"
  serviceAccount:
    annotations:
      "eks.amazonaws.com/role-arn": ${role_arn}
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    path: /
    hosts:
      - ${grafana_domain_name}
    tls:
    - hosts:
      - ${grafana_domain_name}
  env:
    # all values must be quoted
    GF_SERVER_ROOT_URL: "https://${grafana_domain_name}"
    GF_USERS_ALLOW_SIGN_UP: "false"
    GF_AUTH_GITLAB_ENABLED: "true"
    GF_AUTH_GITLAB_ALLOW_SIGN_UP: "true"
    GF_AUTH_GITLAB_CLIENT_ID: "${gitlab_client_id}"
    GF_AUTH_GITLAB_CLIENT_SECRET: "${gitlab_client_secret}"
    GF_AUTH_GITLAB_SCOPES: "api"
    GF_AUTH_GITLAB_AUTH_URL: "https://gitlab.com/oauth/authorize"
    GF_AUTH_GITLAB_TOKEN_URL: "https://gitlab.com/oauth/token"
    GF_AUTH_GITLAB_API_URL: "https://gitlab.com/api/v4"
    GF_AUTH_GITLAB_ALLOWED_GROUPS: "${gitlab_group}"

  persistence:
    enabled: false
    accessModes: ["ReadWriteOnce"]
    size: 5Gi

  sidecar:
    datasources:
      enabled: true

  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: CloudWatch
          type: cloudwatch
          jsonData:
            authType: credentials
            defaultRegion: "${default_region}"
        - name: Loki
          type: loki
          url: http://loki-stack:3100
          jsonData:
            maxLines: 1000

  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'logs'
        orgId: 1
        folder: 'logs'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/logs
      - name: 'k8s'
        orgId: 1
        folder: 'k8s'
        type: file
        disableDeletion: true
        editable: true
        options:
          path: /var/lib/grafana/dashboards/k8s

  dashboards:
    logs:
      logs:
        ## Dashboard for quick search application logs for loki with two datasources loki and prometheus - https://grafana.com/grafana/dashboards/12019
        url: https://grafana-dashboards.maddevs.org/common/aws-eks-base/loki-dashboard-quick-search.json

    k8s:
      nginx-ingress:
      ## Dashboard for nginx-ingress metrics - https://grafana.com/grafana/dashboards/9614
        gnetId: 9614
        datasource: Prometheus
      loki-promtail:
      ## Dashboard for loki and promtail metrics - https://grafana.com/grafana/dashboards/10880
        gnetId: 10880
        datasource: Prometheus
      cluster-autoscaler:
      ## Dashboard for cluster-autoscaler metrics - https://grafana.com/grafana/dashboards/3831
        gnetId: 3831
        datasource: Prometheus

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: eks.amazonaws.com/capacityType
            operator: In
            values:
              - SPOT

# Alertmanager parameters
alertmanager:
  enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/whitelist-source-range: ${ip_whitelist}
    path: /
    hosts:
      - ${alertmanager_domain_name}
    tls:
    - hosts:
      - ${alertmanager_domain_name}
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: ${alertmanager_slack_url}
    route:
      group_by: ['job']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'null'
      routes:
        - match:
            alertname: Watchdog
          receiver: 'null'
        - match:
          receiver: "slack-notifications"
          continue: true
    receivers:
    - name: 'null'
    - name: 'slack-notifications'
      slack_configs:
        - channel: ${alertmanager_slack_channel}
          send_resolved: true
          icon_url: https://avatars3.githubusercontent.com/u/3380462
          username: 'AlertManager'
          color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
          title: '[{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join " " }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join " " }}{{ end }}){{ end }}'
          text: |-
            {{ range .Alerts }}
            {{ if .Annotations.summary }}*Alert:*  - {{ .Annotations.summary }} - `{{ .Labels.severity }}`{{ end }}
            *Description:* {{ .Annotations.message }}
            *Details:*
            {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
            {{ end }}
          icon_emoji: '{{ template "slack.default.iconemoji" . }}'

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: eks.amazonaws.com/capacityType
                operator: In
                values:
                  - ON_DEMAND
